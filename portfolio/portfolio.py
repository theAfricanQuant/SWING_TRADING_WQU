

import datetime
import matplotlib.pyplot as plt
from mpl_finance import candlestick2_ohlc

class UnrealizedPnL:
    """
    Class to store the unrealized profit and loss for different instruments seperately
    """
    def __init__(self):
        self.symbols = {}
        self.value = self.calculate()

    def add(self, new_data):
        if new_data.symbol not in self.symbols:
            self.symbols[new_data.symbol] = 0

    def calculate(self):
        return sum(self.symbols[i] for i in self.symbols)


class Commissions:
    """
    Class for Calculating commissions for an order
    """
    def __init__(self,Market,Broker):
        self.Market = Market
        self.Broker = Broker
        self.Total_value = 0

    def calculate_commissions(self, buy_value, sell_value):
        if self.Market =='NSE' and self.Broker =='ZERODHA':
            self.brokerage = min(((0.01 / 100) * (buy_value + sell_value)), 20)
            self.TrnChg = (0.00325 / 100) * (buy_value + sell_value)
            self.GST = (18 / 100) * (self.brokerage + self.TrnChg)
            self.sebi = (10 / 10000000) * (buy_value + sell_value)
            self.STT = (0.025 / 100) * sell_value
            self.stampduty = (0.002 / 100) * (buy_value + sell_value)
            self.calculate_total()

    def calculate_total(self):
        self.Total_value += self.brokerage + self.STT + self.TrnChg + self.GST + self.sebi + self.stampduty


class Portfolio:
    """
    The main Portfolio class.
    Can do: Create portfolio object.Add capital. Add orders to portfolio. Modify orders.
     Exit orders from portfolio.

    Will Do: Tracks the open orders in the portfolio.
    When each data_point updates , call portfolio.tracker() method to track.
    Will close order whose target , stop or max holding period is hit.
    Will update unrealized profit
    Will calculate Realized profit after each order is closed.

    """
    def __init__(self, Name, Date, Capital):
        self.name = Name #Name of the portfolio
        self.date = Date #Date of creation of Portfolio
        self.IssuedCapital = 0 #Capital issued to the Portfolio
        self.TotalCapital = self.IssuedCapital #Toatl Capital = Issued Capital + Realized PnL
        self.FreeCapital = self.IssuedCapital # Available Capital Margin
        self.issue_capital(Capital)  # see method below. Issue some capital to Portfolio.
        self.UsedCapital = 0 #Used Capital Margin
        self.n_holdings = 0 #Total Orders in holding
        self.Open_Risk = 0  #Total Open Risk of the portfolio
        self.Open_Reward = 0 #Total Open Reward of the portfolio
        self.Unrealized_PnL = UnrealizedPnL() #Open PnL for each instrument in the portfolio.
        self.Commissions = Commissions('NSE','ZERODHA') #Commisions Generated by the portfolio.
        self.Realized_Pnl = 0 # Realized PnL of the closed orders in the portfolio
        self.Buy_Value = 0 # Total buy value of all orders in the portfolio
        self.Sell_Value = 0 # Total Sell value
        self.Buy_Quantity = 0
        self.Sell_Quantity = 0

        self.All_Trades = [] # List will store all the Orders executed. List of Order class Objects.
        self.Closed_Trades = [] # List of  Closed Orders.
        self.Open_Trades = [] # List of Open orders. Type Order class Object.

        # self.set_leverage(leverage)
        self.long_trades = 0 # variable to update the Number of Long trades taken
        self.short_trades = 0 # number of Short Trades taken
        self.winning_trades = 0 # Update winning trades
        self.losing_trades = 0 # Update Losing Trades
        self.Max_Holding_period_close_trades = [0, 0] # Trades closed after max holding period without hitting stop or target.
        #[profit after holding , Loss after holding]

    def issue_capital(self, capital):
        """
        Method to issue capital to portfolio
        :param capital: Capital to be issued. Float
        """
        self.IssuedCapital += capital
        self.TotalCapital += capital
        self.FreeCapital += capital
    # def set_leverage(self,leverage):
    # self.Leverage = leverage

    def add(self, Order):
        """

        Method to Add an order to the portfolio
        :param Order: Order Class Object.Order to be added to the portfolio.

        """
        self.n_holdings += 1
        if Order.direction == 'Long':
            self.Open_Risk += (Order.entry_price - Order.stop_price) * Order.quantity
            self.Open_Reward += (Order.target_price - Order.entry_price) * Order.quantity
            self.Buy_Value += Order.quantity * Order.entry_price
            self.Buy_Quantity += Order.quantity
            self.long_trades += 1
            self.Open_Trades.append(Order)
            self.All_Trades.append(Order)

        if Order.direction == 'Short':
            self.Open_Risk += (Order.stop_price - Order.entry_price) * Order.quantity
            self.Open_Reward += (Order.entry_price - Order.target_price) * Order.quantity
            self.Sell_Value += Order.quantity * Order.entry_price
            self.Sell_Quantity += Order.quantity
            self.short_trades += 1
            self.Open_Trades.append(Order)
            self.All_Trades.append(Order)

    def modify(self, Order, new_target_price, new_stop_price, new_max_holding_period):
        """
        Method to Update the stop or target of an order in the portfolio
        :param Order: Order whose stop or target to be updated
        :param new_target_price: new target price
        :param new_stop_price: new stop price
        :param new_max_holding_period: new maximum holding period for the order
        """

        if Order.direction == 'Long':
            self.Open_Risk -= (Order.entry_price - Order.stop_price) * Order.quantity
            self.Open_Reward -= (Order.target_price - Order.entry_price) * Order.quantity
            Order.target_price = new_target_price
            Order.stop_price = new_stop_price
            Order.max_holding_period = new_max_holding_period
            self.Open_Risk += (Order.entry_price - new_stop_price) * Order.quantity
            self.Open_Reward += (new_target_price - Order.entry_price) * Order.quantity
        if Order.direction == 'Short':
            self.Open_Risk -= (Order.stop_price - Order.entry_price) * Order.quantity
            self.Open_Reward -= (Order.entry_price - Order.target_price) * Order.quantity
            Order.target_price = new_target_price
            Order.stop_price = new_stop_price
            Order.max_holding_period = new_max_holding_period
            self.Open_Risk += (new_stop_price - Order.entry_price) * Order.quantity
            self.Open_Reward += (Order.entry_price - new_target_price) * Order.quantity

    def remove(self, order):
        """
        Method to Close an Open order in the portfolio
        :param order: Order to be removed
        """
        self.Open_Trades.remove(order)

    def price_tracker(self, new_data):

        self.Unrealized_PnL.add(new_data)

        Unrealized = 0
        for each_order in self.Open_Trades:

            each_order.inside_candles.append(new_data)
            if each_order.symbol == new_data.symbol:
                if each_order.direction == 'Long':
                    if new_data.High >= each_order.target_price and new_data.Low > each_order.stop_price:
                        self.Open_Risk -= (each_order.entry_price - each_order.stop_price) * each_order.quantity
                        self.Open_Reward -= (each_order.target_price - each_order.entry_price) * each_order.quantity
                        self.Realized_Pnl += (each_order.target_price - each_order.entry_price) * each_order.quantity
                        self.Sell_Quantity += each_order.quantity
                        self.Sell_Value += each_order.quantity * each_order.target_price
                        each_order.exit_time = new_data.Date
                        each_order.close_price = each_order.target_price
                        each_order.sell_value = each_order.close_price * each_order.quantity
                        self.Commissions.calculate_commissions(each_order.buy_value, each_order.sell_value)
                        self.Closed_Trades.append(each_order)
                        self.remove(each_order)
                        self.winning_trades += 1
                        self.n_holdings -= 1
                    elif new_data.Low <= each_order.stop_price:
                        self.Open_Risk -= (each_order.entry_price - each_order.stop_price) * each_order.quantity
                        self.Open_Reward -= (each_order.target_price - each_order.entry_price) * each_order.quantity
                        self.Realized_Pnl -= (each_order.entry_price - each_order.stop_price) * each_order.quantity
                        self.Sell_Quantity += each_order.quantity
                        self.Sell_Value += each_order.quantity * each_order.stop_price
                        each_order.exit_time = new_data.Date
                        each_order.close_price = each_order.stop_price
                        each_order.sell_value = each_order.close_price * each_order.quantity
                        self.Commissions.calculate_commissions(each_order.buy_value, each_order.sell_value)
                        self.Closed_Trades.append(each_order)
                        self.remove(each_order)
                        self.losing_trades += 1
                        self.n_holdings -= 1
                    elif new_data.Date >= each_order.max_holding_period:
                        self.Open_Risk -= (each_order.entry_price - each_order.stop_price) * each_order.quantity
                        self.Open_Reward -= (each_order.target_price - each_order.entry_price) * each_order.quantity
                        self.Realized_Pnl += (new_data.Close - each_order.entry_price) * each_order.quantity
                        self.Sell_Quantity += each_order.quantity
                        self.Sell_Value += each_order.quantity * new_data.Close
                        each_order.exit_time = new_data.Date
                        each_order.close_price = new_data.Close
                        each_order.sell_value = each_order.close_price * each_order.quantity
                        self.Commissions.calculate_commissions(each_order.buy_value, each_order.sell_value)

                        self.Closed_Trades.append(each_order)
                        self.remove(each_order)
                        if new_data.Close >= each_order.entry_price:
                            self.Max_Holding_period_close_trades[0] += 1
                        else:
                            self.Max_Holding_period_close_trades[1] += 1
                        self.n_holdings -= 1

                    else:
                        Unrealized += (new_data.Close - each_order.entry_price) * each_order.quantity

                elif each_order.direction == 'Short':
                    if new_data.Low <= each_order.target_price and new_data.High < each_order.stop_price:
                        self.Open_Risk -= (each_order.stop_price - each_order.entry_price) * each_order.quantity
                        self.Open_Reward -= (each_order.entry_price - each_order.target_price) * each_order.quantity
                        self.Realized_Pnl += ( each_order.entry_price - each_order.target_price) * each_order.quantity
                        self.Buy_Quantity += each_order.quantity
                        self.Buy_Value += each_order.quantity * each_order.target_price
                        each_order.exit_time = new_data.Date
                        each_order.close_price = each_order.target_price
                        each_order.buy_value = each_order.close_price * each_order.quantity
                        self.Commissions.calculate_commissions(each_order.buy_value, each_order.sell_value)
                        self.Closed_Trades.append(each_order)
                        self.remove(each_order)
                        self.winning_trades += 1
                        self.n_holdings -= 1
                    elif new_data.High >= each_order.stop_price:
                        self.Open_Risk -= (each_order.stop_price - each_order.entry_price) * each_order.quantity
                        self.Open_Reward -= (each_order.entry_price - each_order.target_price) * each_order.quantity
                        self.Realized_Pnl -= (each_order.stop_price - each_order.entry_price) * each_order.quantity
                        self.Buy_Quantity += each_order.quantity
                        self.Buy_Value += each_order.quantity * each_order.stop_price
                        each_order.exit_time = new_data.Date
                        each_order.close_price = each_order.stop_price
                        each_order.buy_value = each_order.close_price * each_order.quantity
                        self.Commissions.calculate_commissions(each_order.buy_value, each_order.sell_value)
                        self.Closed_Trades.append(each_order)
                        self.remove(each_order)
                        self.losing_trades += 1
                        self.n_holdings -= 1
                    elif new_data.Date >= each_order.max_holding_period:
                        self.Open_Risk -= (each_order.stop_price - each_order.entry_price) * each_order.quantity
                        self.Open_Reward -= (each_order.entry_price - each_order.target_price) * each_order.quantity
                        self.Realized_Pnl += (new_data.Close - each_order.entry_price) * each_order.quantity
                        self.Buy_Quantity += each_order.quantity
                        self.Buy_Value += each_order.quantity * new_data.Close
                        each_order.exit_time = new_data.Date
                        each_order.close_price = new_data.Close
                        each_order.buy_value = each_order.close_price * each_order.quantity
                        self.Commissions.calculate_commissions(each_order.buy_value, each_order.sell_value)
                        self.Closed_Trades.append(each_order)
                        self.remove(each_order)
                        if new_data.Close <= each_order.entry_price:
                            self.Max_Holding_period_close_trades[0] += 1
                        else:
                            self.Max_Holding_period_close_trades[1] += 1

                        self.n_holdings -= 1
                    else:
                        Unrealized += (new_data.Close - each_order.entry_price) * each_order.quantity

        self.Net_Value = self.Buy_Value - self.Sell_Value
        self.Net_Quantity = self.Buy_Quantity - self.Sell_Quantity
        self.Unrealized_PnL.symbols[new_data.symbol] = Unrealized
        self.TotalCapital = self.IssuedCapital + self.Realized_Pnl
        self.NetPnL = self.Realized_Pnl - self.Commissions.Total_value
        if self.Closed_Trades != []:
            self.calculate_holding_peroid()

    def capital_tracker(self, new_data):
        Used_Capital = sum(
            (each_order.margin_required / each_order.order_leverage)
            for each_order in self.Open_Trades
        )
        self.UsedCapital = Used_Capital
        self.FreeCapital = self.TotalCapital - self.UsedCapital

    def tracker(self, new_data):
        self.price_tracker(new_data)
        self.capital_tracker(new_data)

    def calculate_holding_peroid(self):
        self.total_holding_period = datetime.timedelta(minutes=0)
        for i in self.Closed_Trades:
            self.total_holding_period += (i.exit_time - i.entry_time)
        self.average_holding_period = self.total_holding_period / len(self.Closed_Trades)

    def get_portfolio_stats(self):

        print("OPEN RISK: ", self.Open_Risk)
        print("Unrealized: ", self.Unrealized_PnL.symbols)
        print("Unrealized total : ", self.Unrealized_PnL.value)
        print("Realized: ", self.Realized_Pnl)
        print("Buy Value: ", self.Buy_Value)
        print("Sell Value: ", self.Sell_Value)
        print("Buy Quantity: ", self.Buy_Quantity)
        print("Sell Quantity: ", self.Sell_Quantity)
        print("Net Value: ", self.Net_Value)
        print("Net Quantity: ", self.Net_Quantity)
        print("Total number of trades:", len(self.All_Trades))
        print("Total Commission: ", self.Commissions.Total_value)
        print("Net PnL: ", self.NetPnL)

        """
        Stats
        """
        print("****************************************************")
        print("STATS")
        print("****************************************************")
        print("Number of Long Trades: ", self.long_trades)
        print("Number of Short Trades: ", self.short_trades)
        print("Total holding period: ", self.total_holding_period)
        print("Average holding period: ", self.average_holding_period)
        print("Number of Winning trades: ", self.winning_trades)
        print("Number of Losing trades: ", self.losing_trades)
        print("Total Max_HP Trades: ", sum(self.Max_Holding_period_close_trades))
        print("Number of Max_HP trades closed in profit: ", self.Max_Holding_period_close_trades[0])
        print("Number of Max_HP trades closed in loss: ", self.Max_Holding_period_close_trades[1])
        print("Hit Rate: ", self.winning_trades / len(self.All_Trades))
        print("Mean profit per trade: ", self.NetPnL / len(self.All_Trades))

    def plot_trade(self, Trade):

        print("===========================================")

        print("Sample Closed Trade")
        print("===========================================")
        print("Entry Time : ", Trade.entry_time)
        print("Entry Price : ", Trade.entry_price)
        print("Stop price : ", Trade.stop_price)
        print("Target price : ", Trade.target_price)
        print("Max holding period : ", Trade.max_holding_period)
        print("Exit Time : ", Trade.exit_time)

        dates = []
        opens = []
        highs = []
        lows = []
        closes = []
        volumes = []

        for i in Trade.inside_candles:
            dates.append(i.Date)
            opens.append(i.Open)
            highs.append(i.High)
            lows.append(i.Low)
            closes.append(i.Close)
            volumes.append(i.Volume)



        fig = plt.figure()
        ax1 = plt.subplot()


        #Dates are not plotting correctly, so removing them
        #ax1.set_xticklabels(dates)

        #for label in ax1.xaxis.get_ticklabels():
            #label.set_rotation(90)

        # plot the candlesticks
        candlestick2_ohlc(ax1, opens, highs,
                          lows, closes, width= .5, colorup='green', colordown='red')

        plt.axhline(y=Trade.entry_price, color='black', linewidth=3)
        plt.axhline(y=Trade.target_price, color='green', linewidth=3)
        plt.axhline(y=Trade.stop_price, color='red', linewidth=3)

        plt.show()


